package com.mckuai.imc.Utils.MCDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mckuai.imc.Bean.Forum;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "Forum".
 */
public class ForumDao extends AbstractDao<Forum, Long> {

    public static final String TABLENAME = "Forum";

    /**
     * Properties of entity Forum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PostCount = new Property(1, Integer.class, "postCount", false, "postCount");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Cover = new Property(3, String.class, "cover", false, "cover");
        public final static Property Type = new Property(4, String.class, "type", false, "type");
    }

    ;


    public ForumDao(DaoConfig config) {
        super(config);
    }

    public ForumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"Forum\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"postCount\" INTEGER," + // 1: postCount
                "\"name\" TEXT," + // 2: name
                "\"cover\" TEXT," + // 3: cover
                "\"type\" TEXT);"); // 4: type
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Forum\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Forum entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer postCount = entity.getPostCount();
        if (postCount != null) {
            stmt.bindLong(2, postCount);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Forum readEntity(Cursor cursor, int offset) {
        Forum entity = new Forum( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // postCount
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Forum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPostCount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Forum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Forum entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
